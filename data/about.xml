<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?teipublisher odd="docbook.odd" template="documentation.html" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1">
    <info>
        <title>About</title>
        <author>
            <personname>Magdalena Turska</personname>
        </author>
    </info>
    <section>
        <title>About cross-search</title>

        <para>This app is a prototype demonstrating how to build a search engine to query various
            editions exposing the TEI Publisher API at the same time.</para>
        <para>Work on this prototype has been co-funded by DIPF / BBF. Development work has been
            carried out by Magdalena Turska of eXist Solutions. </para>
        <para>This cross-search engine leverages major developments of the TEI Publisher / eXist-db
            open source projects, particularly the Lucene-based facets and fields capacity of
            eXist-db and the Open API support of the TEI Publisher.</para>
        <para>This prototype uses two TEI Publisher demo apps: <link
                xlink:href="https://github.com/eeditiones/dodis-wall">Dodis: When the Wall Came
                Down</link> and the <link xlink:href="https://github.com/eeditiones/eltec">ELTeC:
                European Literary Corpus</link> to showcase the concept.</para>

        <section>
            <title> Preliminary assumptions</title>

            <itemizedlist>

                <listitem>
                    <para>initial targets are Publisher 7 based apps</para>
                </listitem>
                <listitem>
                    <para>running on a single eXist-db instance</para>
                </listitem>
                <listitem>
                    <para>with comparable data sets; data can be encoded with any schema, but it
                        should have the same (or mappable) fields and facets set defined and using
                        the same taxonomies </para>
                </listitem>
                <listitem>
                    <para>exposing the predefined API endpoint, accepting the same set of parameters
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Search parameters</title>

            <para> Each of the apps to be aggregated is required to expose the
                    <code>/api/search/document</code> API endpoint. It must accept a number of
                parameters defined in the endpoint specification. For this prototype the
                    <emphasis>title</emphasis>, <emphasis>author</emphasis> and
                    <emphasis>lang(uage)</emphasis> fields as well as <emphasis>genre</emphasis>,
                    <emphasis>language</emphasis> and <emphasis>corpus</emphasis> facets were
                assumed. </para>

            <para>As mentioned earlier, each parameter corresponds to a field or facet definiton in
                the context of the individual app. Each field parameter (title, author and language)
                has a corresponding <code>-operator</code> parameter representing a logical
                conjunction (<emphasis>AND / OR</emphasis>) to be used when multiple values for a
                single parameter are passed to the query (e.g. <code>author</code> and
                    <code>author-operator</code>). </para>
            <para> Parameters for use in facetted search follow the <code>facet-</code> naming
                pattern.</para>
            <para> Additional sort parameter determines the order of sorting.</para>

            <para>For example, a request could specify parameters as follows to express a search for
                a document with containing the phrase <emphasis>embassy</emphasis> and authored by
                someone for whom the part of their name starts with the letter
                    <emphasis>F</emphasis> or <emphasis>B</emphasis>. Result set is expected to be
                ordered by the document title.</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">query:</emphasis> embassy</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">author:</emphasis> F* or B*</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">author-operator:</emphasis> or</para>
                </listitem>

                <listitem>
                    <para><emphasis role="bold">sort:</emphasis> title</para>
                </listitem>
            </itemizedlist>

        </section>
        <section>
            <title>Search results</title>

            <para> It is required that individual apps implement the
                    <code>api/search/document</code> endpoint in a way, which returns matching
                results (representing documents) in a structure required for the aggregated search,
                namely a JSON structure containing two parts: </para>

            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">data:</emphasis> an array containing matched results
                        as maps with following keys: </para>
                    <itemizedlist>
                        <listitem>
                            <para>app collection name</para>
                        </listitem>
                        <listitem>
                            <para>document path relative to the app data root colection</para>
                        </listitem>
                        <listitem>
                            <para>values of all the fields available for sorting </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">facets:</emphasis> containing facet counts
                        corresponding with the matched results </para>
                </listitem>
            </itemizedlist>

            <programlisting language="xquery" xml:space="preserve">
{
  "data": [
    {
      "app": "dodis-facets",
      "filename": "52928.xml",
      "author": [
        "Plattner, Johann (1932–)",
        "Austria/Ministry of Foreign Affairs"
      ],
      "title": "Debatte über die deutsche Wiedervereinigung; Information und Sprachregelung",
      "language": "de"
    },
    ...
    ],
  "facets": {
    "genre": {
      "Telegram": 1,
      "Memo": 4
    },
    "corpus": {
      "Dodis": 5
    },
    "language": {
      "de": 5
    }
  }
}
                </programlisting>
        </section>
        <section>
            <title>App configuration</title>

            <para>Aggregate search app</para>
            <para>This aggregate search application implements the <code>api/search/document</code>
                endpoint and exposes it in its custom API specification.</para>
            <para>Applications aggregated for search are specified in
                    <code>modules/config.xqm</code> in the <code>$config:sub</code> variable. Each
                entry defines the app location, title to be used, tile image to be used in the
                Dashboard section and symbol icon to be used to distinguish the app in the matched
                results list. </para>
            <programlisting language="xquery" xml:space="preserve">
(: Configuration for cross-search :)
declare variable $config:sub := (
    map {
        "app": "eltec", 
        "title": "ELTeC: European Literary Corpus",
        "icon": "eltec-logo.jpeg",
        "symbol": "icons:bookmark"
    },
    map { 
        "app": "dodis-facets",
        "title": "Dodis: When the Wall Came Down",
        "icon": "trabi.jpg",
        "symbol": "icons:drafts"
    });

                </programlisting>

            <para>Individual apps</para>
            <para>An app needs to add a <code>api/search/document</code> path to the custom API
                specification and implement the corresponding search function. This endpoing must
                accept all the parameters specified in the corresponding aggregate search
                endpoint.</para>
            <para>Configuration of the mapping between <code>api/search/document</code> parameters
                and fields and facets of the app is realized via config.xqm:
                $config:cross-search-facets and $config:cross-search-fields.</para>
            <programlisting language="xquery" xml:space="preserve">
declare variable $config:cross-search-facets := 
    map {
            "genre": "genre", 
            "language": "language-id",
            "corpus": "corpus"      
    };
declare variable $config:cross-search-fields := 
    map {
        "lang": "language-id", 
        "author":"author", 
        "title":"title"
    };
    </programlisting>

        </section>
        <section>
            <title>Roadmap for further development</title>

            <itemizedlist>
                <listitem>
                    <para>extended base parameter set</para>
                </listitem>
                <listitem>
                    <para>improved UI</para>
                </listitem>
                <listitem>
                    <para>stress-testing on larger data sets and under high load conditions</para>
                </listitem>
                <listitem>
                    <para>individualized display for the result set (leveraging ODD-transformation
                        via individual apps)</para>
                </listitem>
                <listitem>
                    <para>pagination for the result set</para>
                </listitem>
                <listitem>
                    <para>fragment search: results are document fragments: divisions/sections;
                        corresponding to Publisher's full text search </para>
                </listitem>
                <listitem>
                    <para>extended implementation might include also:</para>
                    <itemizedlist>
                        <listitem>
                            <para> document fragment id (either xml:id or node-id) [optional]
                            </para>
                        </listitem>
                        <listitem>
                            <para>full-text match ids [optional] </para>
                        </listitem>
                        <listitem>
                            <para>ODD-transformed document header [optional] </para>
                        </listitem>
                        <listitem>
                            <para>ODD-transformed full-text content matched [optional] </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>

        </section>

    </section>
</article>
